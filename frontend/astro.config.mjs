// @ts-check
// This file configures the Astro project settings.
// It defines integrations, build options, and development server settings like HTTPS and proxying.

// Import core Astro configuration utility
import { defineConfig } from 'astro/config';

// Import official Astro integrations
import react from '@astrojs/react'; // Used for integrating React components
import tailwind from '@astrojs/tailwind'; // Used for integrating Tailwind CSS

// Import Node.js built-in modules for path manipulation
import { fileURLToPath } from 'url'; // Used to convert file URLs to paths
import path from 'path'; // Used for resolving paths

// --- Configure Paths to mkcert files ---
// These paths tell Astro where to find the SSL certificate and key files
// for running the development server over HTTPS.
// Adjust the 'certs' folder path if your certificates are located elsewhere
// relative to the astro.config.mjs file.
const projectRoot = fileURLToPath(new URL('.', import.meta.url)); // Gets the directory of the current file
const certsDir = path.join(projectRoot, 'certs'); // Assumes 'certs' folder is in the project root

// Define the full paths to the certificate and key files.
// IMPORTANT: Verify the EXACT filenames generated by mkcert.
// If you ran `mkcert localhost`, you likely got `localhost.pem` and `localhost-key.pem`.
// If you ran `mkcert localhost 127.0.0.1 ::1`, you likely got `localhost+2.pem` and `localhost+2-key.pem`.
// Update the filenames below to match what mkcert actually created in your 'certs' folder.
const CERT_FILE = path.join(certsDir, "localhost+2.pem"); // <-- **VERIFY THIS FILENAME**
const KEY_FILE = path.join(certsDir, "localhost+2-key.pem"); // <-- **VERIFY THIS FILENAME**

// Optional: Add a check to verify that the certificate files exist when Astro starts.
// This can be helpful for debugging File Not Found errors.
// import fs from 'fs';
// if (!fs.existsSync(CERT_FILE) || !fs.existsSync(KEY_FILE)) {
//    console.error(`\nError: mkcert files not found!`);
//    console.error(`Looking for: ${CERT_FILE} and ${KEY_FILE}`);
//    console.error("Please run mkcert localhost 127.0.0.1 ::1 in your 'certs' directory and update filenames in astro.config.mjs.");
//    // In a production setup, you might throw an error here or exit the process.
//    // process.exit(1); // Uncomment this to stop Astro if certs are missing
// }


// https://astro.build/config - The main configuration object for Astro.
export default defineConfig({
  // --- Top-level Astro Configuration Options ---
  // These options apply to the entire Astro project build and dev server.

  // Configure the theme for the Astro error overlay displayed in the browser during development.
  astroErrorOverlayTheme: "dark",

  // Define the integrations used in the project.
  // Integrations add support for frameworks, styling, etc.
  integrations: [
    // Configure the React integration.
    // This allows using React components as Astro Islands.
    react(),

    // Configure the Tailwind CSS integration.
    // This integrates Tailwind's build process with Astro.
    tailwind({
      // Options for the @astrojs/tailwind integration go here.
      // This includes configuring Tailwind's dark mode strategy.
      //darkMode: 'class', // <-- Configure Tailwind to use class-based dark mode.
      // You can pass your Tailwind config object here if you don't use a separate tailwind.config.mjs file.
      // config: { /* Tailwind config object like theme, plugins, etc. */ },
    }),

    // Remove conflicting Vite plugins if they were previously added here.
    // remove: basicSsl(), // basicSsl is not needed when using server.https
  ],

  // --- Development Server Configuration ---
  // These options configure the behavior of the 'astro dev' command.
  server: {
    // --- Configure proxying for API calls ---
    // This tells Astro's dev server to intercept browser requests that match a specified path
    // and forward them to a different target URL (your backend API Gateway).
    // This is crucial for making client-side fetch requests work seamlessly.
    proxy: {
       // Proxy requests starting with '/google' (e.g., /google/login, /google/callback)
       // to your Flask backend's HTTPS URL.
       '/google': {
         target: 'https://localhost:5100', // <-- **VERIFY**: Your Flask backend's HTTPS address and port
         changeOrigin: true, // Recommended for CORS; changes the Origin header of the forwarded request
         // rewrite: (path) => path, // Often not needed if paths match between frontend and backend
         secure: true, // Use 'true' because the backend is expected to be using a trusted certificate (from mkcert)
       },
       // Proxy requests to '/test'
       '/test': {
           target: 'https://localhost:5100', // <-- **VERIFY**: Your Flask backend's HTTPS address and port
           changeOrigin: true,
           secure: true,
        },
        // Proxy requests to '/logout'
        '/logout': {
           target: 'https://localhost:5100', // <-- **VERIFY**: Your Flask backend's HTTPS address and port
           changeOrigin: true,
           secure: true,
        },
        // Proxy requests to '/browse' (used by FileExplorer to get file list)
        '/browse': {
           target: 'https://localhost:5100', // <-- **VERIFY**: Your Flask backend's HTTPS address and port
           changeOrigin: true,
           secure: true,
           // rewrite: (path) => path.replace(/^\/browse/, '/api/list'), // Adjust rewrite if frontend /browse maps to different backend path (/api/list in your Flask)
        },
        // Add proxy rules for any other API endpoints your frontend calls using relative paths.
        // Example: For FileUploader, Rename, Delete, etc.
        '/upload': { target: 'https://localhost:5100', changeOrigin: true, secure: true }, // <-- **VERIFY**
        '/delete': { target: 'https://localhost:5100', changeOrigin: true, secure: true }, // <-- **VERIFY**
        '/rename': { target: 'https://localhost:5100', changeOrigin: true, secure: true }, // <-- **VERIFY**
        // If you have other API paths like '/api/file' or '/api/notifications':
         '/api': { target: 'https://localhost:5100', changeOrigin: true, secure: true }, // <-- **VERIFY** (Proxies /api/*)
         // If you implement /create-directory endpoint on your backend:
         '/create-directory': { target: 'https://localhost:5100', changeOrigin: true, secure: true }, // <-- **VERIFY**

    },
  },

  // --- Vite Configuration ---
  // This object is for configuring Vite's build behavior directly.
  // Only put configuration here if it's specific to Vite's process
  // and not handled by Astro's top-level options or integrations.
  vite: {
    plugins: [
      // Remove conflicting Tailwind plugin if it was here, @astrojs/tailwind handles it.
      // remove: tailwindcss(),
      // Remove conflicting SSL plugin if it was here.
      // remove: basicSsl(),
    ],
    // Ensure no 'server' block is nested inside 'vite', as Astro handles it at the top level.
    // remove: server: { https: {...} }
  },

  // --- Other Top-level Astro Configuration Options ---
  // Add other project-specific configurations here as needed.
  // outDir: './dist', // Specify the build output directory
  // site: 'https://www.yourdfs.com', // Your production website URL
  // base: '/', // The base path for your project (if not hosted at the root)
});